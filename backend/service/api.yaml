openapi: 3.0.2
info:
  title: "TournaMaker"
  description: "A tournament scheduling application for multiple types of tournaments."
  version: "1.0"
servers:
- url: https://tournamaker.appspot.com
  description: Frontend server
- url: https://backend-dot-tournamaker.appspot.com
  description: Backend server
paths:
  /login:
    post:
      description: Get an authorization token
      tags:
      - general
      
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  description: The email to login with
                password:
                  type: string
                  description: The password to login with
      
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  displayName:
                    type: string
                    description: The display name of the user in firebase
                  email:
                    type: string
                    description: The email of the user
                  expiresIn:
                    type: string
                    description: The number of seconds that the token expires in
                  idToken:
                    type: string
                    description: The authorization token
                  kind:
                    type: string
                    description: The type of token that was returned
                  localId:
                    type: string
                    description: The firebase ID of the user
                  refreshToken:
                    type: string
                    description: A token to use to refresh the authorization token
                  registered:
                    type: boolean
                    description: Whether or not the user is registered
        400:
          description: Missing or invalid data in request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        
        401:
          description: Invalid login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user:
    get:
      description: Read the user object of the logged in user
      tags: 
        - user
      parameters:
      - name: X-Authorization
        in: header
        schema:
          type: string
        required: true
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                title: User
                type: object
                properties:
                  display_name:
                    type: string
                    description: The unique display name of the user
                  email:
                    type: string
                    description: The unique email of the user
                  last_modified:
                    type: string
                    description: The date time that the user was last modified
                  create_date:
                    type: string
                    description: The date time that the user was created
                  tournaments:
                    type: array
                    description: A list of tournament IDs for the tournaments that the user owns
                    items:
                      type: string
                  teams:
                    type: array
                    description: A list of team IDs for the teams that the user is a member of
                    items:
                      type: string
                  team_invites:
                    type: array
                    description: A list of team IDs for the teams that the user has been invited to
                    items:
                      type: string
                    
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                    
        500:
          description: Error Reading User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    patch:
      description: Update the user object of the logged in user
      tags: 
        - user
      parameters:
      - name: X-Authorization
        in: header
        schema:
          type: string
        required: true
      requestBody:
        content:
          application/json:
            schema:
              title: The updates that should be applied to the user object
              type: object
              properties:
                display_name:
                  type: string
                  description: The new display name for the user.
                  
      responses:
        200:
          description: A successful response
          content:
            text/plain:
              schema:
                type: string
                    
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                    
        400:
          description: No update fields provided or display name in use
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      
  /user/<team_key>/accept:
    patch:
      description: Accept an invite to a team
      tags:
      - user
      
      parameters:
      - name: X-Authorization
        in: header
        schema:
          type: string
        required: true
      - name: team_key
        in: path
        schema:
          type: string
        required: true
          
      responses:
      
        200:
          description: A successful response
          content:
            text/plain:
              schema:
                type: string
                example: Success
        
        400:
          description: No invite to given team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        
        404:
          description: Team not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      
  /user/<team_key>/decline:
    delete:
      description: Decline an invite to a team
      tags:
      - user
      
      parameters:
      - name: X-Authorization
        in: header
        schema:
          type: string
        required: true
      - name: team_key
        in: path
        schema:
          type: string
        required: true
          
      responses:
      
        200:
          description: A successful response
          content:
            text/plain:
              schema:
                type: string
                example: Success
        
        400:
          description: No invite to given team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        
        404:
          description: Team not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
  /tournament:
    post:
      description: Create a new tournament object
      tags: 
        - tournament
      parameters:
      - name: X-Authorization
        in: header
        schema:
          type: string
        required: true
      requestBody:
        content:
          application/json:
            schema:
              title: The fields to create the tournament with
              type: object
              properties:
                name:
                  type: string
                  description: The name of the new tournament
                game_type:
                  type: string
                  description: The game type of the new tournament
                tournament_structure:
                  type: string
                  description: The structure of the new tournament (i.e. swiss)
                description:
                  type: string
                  description: An optional description of this tournament
                start_date_time:
                  type: string
                  description: The date time that the tournament should start
                end_date_time:
                  type: string
                  description: The date time that the tournament should end
                registration_open_date_time:
                  type: string
                  description: The date time that registration for this tournament opens
                registration_close_date_time:
                  type: string
                  description: The date time that the registration for this tournament closes
                elimination_number:
                  type: number
                  description: The number of rounds that it takes for a player to be eliminated in n_elimination
              required:
                - name
                - game_type
                - tournament_structure
                  
      responses:
        200:
          description: A successful response
          content:
            text/plain:
              schema:
                type: string
                example: Success
                    
        401:
          description: No authorization token given
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                    
        400:
          description: Invalid or missing data in request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
  /tournament/<display_name>/<tournament_name>:
    get:
      description: Search for a tournament
      tags: 
        - tournament
      parameters:
      - name: X-Authorization
        in: header
        schema:
          type: string
        required: true
      - name: display_name
        description: The display name of the user who created the tournament
        in: path
        schema:
          type: string
        required: true
      - name: tournament_name
        description: The name of the tournament
        in: path
        schema:
          type: string
        required: true
                  
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tournament"
                
        401:
          description: No authorization token given
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                    
        404:
          description: Tournament not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
  /tournament/<tournament_key>:
    get:
      description: Read a tournament by key
      tags:
      - tournament
      parameters:
      - name: X-Authorization
        in: header
        schema:
          type: string
        required: true
      - name: tournament_key
        in: path
        schema:
          type: string
        required: true
          
      responses:
      
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tournament"
        
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        
        400:
          description: Invalid tournament key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        
        404:
          description: Tournament not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /tournament/<tournament_key>/signup/<team_key>:
    post:
      description: Sign a team up for a tournament
      tags:
      - tournament
      parameters:
      - name: X-Authorization
        in: header
        schema:
          type: string
        required: true
      - name: tournament_key
        in: path
        schema:
          type: string
        required: true
      - name: team_key
        in: path
        schema:
          type: string
        required: true
          
      responses:
      
        200:
          description: A successful response
          content:
            text/plain:
              schema:
                type: string
                example: Success
        
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        
        400:
          description: Invalid team or tournament key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /tournament/<tournament_key>/leave/<team_key>:
    delete:
      description: Remove a team from a tournament
      tags:
      - tournament
      parameters:
      - name: X-Authorization
        in: header
        schema:
          type: string
        required: true
      - name: tournament_key
        in: path
        schema:
          type: string
        required: true
      - name: team_key
        in: path
        schema:
          type: string
        required: true
          
      responses:
      
        200:
          description: A successful response
          content:
            text/plain:
              schema:
                type: string
                example: Success
        
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        
        400:
          description: Invalid team or tournament key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      
  /team:
    post:
      description: Create a new team
    
      tags:
      - team
      
      parameters:
      - name: X-Authorization
        in: header
        schema:
          type: string
        required: true
        
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The name of the new team
                  type: string
                invited_members:
                  description: A list of display names of members that should be invited to this team
                  type: array
                  items:
                    type: string
      
      responses:
      
        200:
          description: A successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  team_key:
                    type: string
                
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
        400:
          description: Invalid or missing data in request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /team/<team_key>:
    get:
      description: Read a team by key
      tags:
      - team
      parameters:
      - name: X-Authorization
        in: header
        schema:
          type: string
        required: true
      - name: team_key
        in: path
        schema:
          type: string
        required: true
          
      responses:
      
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"
        
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        
        404:
          description: Team not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /team/<team_key>/invite/<user_key>:
    post:
      description: Invite a user to join this team
      tags:
      - team
      
      parameters:
      - name: X-Authorization
        in: header
        schema:
          type: string
        required: true
      - name: team_key
        in: path
        schema:
          type: string
        required: true
      - name: user_key
        in: path
        schema:
          type: string
        required: true
          
      responses:
      
        200:
          description: A successful response
          content:
            text/plain:
              schema:
                type: string
                example: Success
        
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        
        404:
          description: Team not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      
      
components:
  schemas:
    Tournament:
      properties:
        owner:
          type: string
          description: The owner of the tournament
        name:
          type: string
          description: The name of the tournament
          example: Tournament Name
        created_date:
          type: string
          description: The date time that the tournament was created
          example: "HH/MM/YYYY HH:MM:SS"
        last_modified:
          type: string
          description: The date time that the tournament was last modified
          example: "HH/MM/YYYY HH:MM:SS"
        description:
          type: string
          description: A description of the tournament
        start_date_time:
          type: string
          description: The date time that the tournament starts
          example: "HH/MM/YYYY HH:MM:SS"
        end_date_time:
          type: string
          description: The date time that the tournament ends
          example: "HH/MM/YYYY HH:MM:SS"
        registration_open_date_time:
          type: string
          description: The date time that registration for the tournament opens
          example: "HH/MM/YYYY HH:MM:SS"
        registration_close_date_time:
          type: string
          description: The date time that registration for the tournament closes
          example: "HH/MM/YYYY HH:MM:SS"
        game_type:
          type: string
          description: The game type of the new tournament
        tournament_structure:
          type: string
          description: The structure of the tournament
          example: swiss
        elimination_number:
          type: number
          description: The number of rounds that it takes for a player to be eliminated in n_elimination
        teams:
          type: array
          description: An array of team keys for the teams that are registered for the tournament
          items:
            type: string
    Error:
      properties:
        error:
          type: string
          description: The error that occured
    Team:
      properties:
        name:
          type: string
          description: The name of the team
        members:
          type: array
          description: A list of members on the team
          items:
            type: string
        events:
          type: array
          description: A list of events that the team is registered for
          items:
            type: string
        invited_members:
          type: array
          description: A list of members that currently have an active invite to this team
          items:
            type: string
